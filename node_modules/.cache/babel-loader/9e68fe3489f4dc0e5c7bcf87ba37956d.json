{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Composables\n\nimport { useColor } from \"./color.mjs\"; // Utilities\n\nimport { computed, unref } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const allowedVariants = ['outlined', 'plain', 'text', 'contained', 'contained-flat', 'contained-text'];\nexport function genOverlays(isClickable, name) {\n  return _createVNode(_Fragment, null, [isClickable && _createVNode(\"div\", {\n    \"class\": `${name}__overlay`\n  }, null), _createVNode(\"div\", {\n    \"class\": `${name}__underlay`\n  }, null)]);\n}\nexport const makeVariantProps = propsFactory({\n  color: String,\n  textColor: String,\n  variant: {\n    type: String,\n    default: 'contained',\n    validator: v => allowedVariants.includes(v)\n  }\n}, 'variant');\nexport function useVariant(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  const variantClasses = computed(() => {\n    const {\n      variant\n    } = unref(props);\n    return `${name}--variant-${variant}`;\n  });\n  const {\n    colorClasses,\n    colorStyles\n  } = useColor(computed(() => {\n    const {\n      textColor,\n      variant,\n      color\n    } = unref(props);\n    return {\n      text: textColor,\n      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color\n    };\n  }));\n  return {\n    colorClasses,\n    colorStyles,\n    variantClasses\n  };\n}","map":{"version":3,"mappings":"0EAAA;;SACSA,gB,eAET;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,wBAAwBC,oB,qBAEjC;;AAIA,OAAO,MAAMC,eAAe,GAAG,CAC7B,UAD6B,EAE7B,OAF6B,EAG7B,MAH6B,EAI7B,WAJ6B,EAK7B,gBAL6B,EAM7B,gBAN6B,CAAxB;AAiBP,OAAO,SAASC,WAAT,CAAsBC,WAAtB,EAA4CC,IAA5C,EAA0D;AAC/D,wCAEMD,WAAW;AAAA,aAAiB,GAAEC,IAAK;AAAxB,UAFjB;AAAA,aAIiB,GAAEA,IAAK;AAJxB;AAOD;AAED,OAAO,MAAMC,gBAAgB,GAAGL,YAAY,CAAC;AAC3CM,OAAK,EAAEC,MADoC;AAE3CC,WAAS,EAAED,MAFgC;AAG3CE,SAAO,EAAE;AACPC,QAAI,EAAEH,MADC;AAEPI,WAAO,EAAE,WAFF;AAGPC,aAAS,EAAGC,CAAD,IAAYZ,eAAe,CAACa,QAAhBb,CAAyBY,CAAzBZ;AAHhB;AAHkC,CAAD,EAQzC,SARyC,CAArC;AAUP,OAAO,SAASc,UAAT,CACLC,KADK,EAGL;AAAA,MADAZ,IACA,uEADOL,sBAAsB,EAC7B;AACA,QAAMkB,cAAc,GAAGpB,QAAQ,CAAC,MAAM;AACpC,UAAM;AAAEY;AAAF,QAAcX,KAAK,CAACkB,KAAD,CAAzB;AACA,WAAQ,GAAEZ,IAAK,aAAYK,OAAQ,EAAnC;AAF6B,IAA/B;AAKA,QAAM;AAAES,gBAAF;AAAgBC;AAAhB,MAAgCvB,QAAQ,CAACC,QAAQ,CAAC,MAAM;AAC5D,UAAM;AAAEW,eAAF;AAAaC,aAAb;AAAsBH;AAAtB,QAAgCR,KAAK,CAACkB,KAAD,CAA3C;AACA,WAAO;AACLI,UAAI,EAAEZ,SADD;AAEL,OAAC,CAAC,WAAD,EAAc,gBAAd,EAAgCM,QAAhC,CAAyCL,OAAzC,IAAoD,YAApD,GAAmE,MAApE,GAA6EH;AAFxE,KAAP;AAFqD,IAAT,CAA9C;AAQA,SAAO;AAAEY,gBAAF;AAAgBC,eAAhB;AAA6BF;AAA7B,GAAP;AACD","names":["useColor","computed","unref","getCurrentInstanceName","propsFactory","allowedVariants","genOverlays","isClickable","name","makeVariantProps","color","String","textColor","variant","type","default","validator","v","includes","useVariant","props","variantClasses","colorClasses","colorStyles","text"],"sources":["../../src/composables/variant.tsx"],"sourcesContent":["// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'outlined',\n  'plain',\n  'text',\n  'contained',\n  'contained-flat',\n  'contained-text',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  textColor?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div class={`${name}__overlay`} /> }\n\n      <div class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  textColor: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'contained',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { textColor, variant, color } = unref(props)\n    return {\n      text: textColor,\n      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"]},"metadata":{},"sourceType":"module"}