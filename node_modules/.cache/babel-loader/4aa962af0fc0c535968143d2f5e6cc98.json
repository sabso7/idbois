{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'; // Globals\n\nimport { IN_BROWSER } from \"../util/globals.mjs\";\nexport function useResizeObserver(callback) {\n  const resizeRef = ref();\n  const contentRect = ref();\n  const contentBoxSize = ref();\n  const borderBoxSize = ref();\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver(entries => {\n      callback == null ? void 0 : callback(entries, observer);\n      if (!entries.length) return;\n      contentRect.value = entries[0].contentRect;\n      contentBoxSize.value = entries[0].contentBoxSize[0];\n      borderBoxSize.value = entries[0].borderBoxSize[0];\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        contentRect.value = undefined;\n        contentBoxSize.value = undefined;\n        borderBoxSize.value = undefined;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n    contentBoxSize: readonly(contentBoxSize),\n    borderBoxSize: readonly(borderBoxSize)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD,C,CAGA;;SACSC,kB;AAST,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAA4E;AACjF,QAAMC,SAAS,GAAGL,GAAG,EAArB;AACA,QAAMM,WAAW,GAAGN,GAAG,EAAvB;AACA,QAAMO,cAAc,GAAGP,GAAG,EAA1B;AACA,QAAMQ,aAAa,GAAGR,GAAG,EAAzB;;AAEA,MAAIE,UAAJ,EAAgB;AACd,UAAMO,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAoC;AACtEP,cAAQ,QAARA,oBAAQ,CAAGO,OAAH,EAAYF,QAAZ,CAARL;AAEA,UAAI,CAACO,OAAO,CAACC,MAAb,EAAqB;AAErBN,iBAAW,CAACO,KAAZP,GAAoBK,OAAO,CAAC,CAAD,CAAPA,CAAWL,WAA/BA;AACAC,oBAAc,CAACM,KAAfN,GAAuBI,OAAO,CAAC,CAAD,CAAPA,CAAWJ,cAAXI,CAA0B,CAA1BA,CAAvBJ;AACAC,mBAAa,CAACK,KAAdL,GAAsBG,OAAO,CAAC,CAAD,CAAPA,CAAWH,aAAXG,CAAyB,CAAzBA,CAAtBH;AAPe,MAAjB;AAUAV,mBAAe,CAAC,MAAM;AACpBW,cAAQ,CAACK,UAATL;AADa,MAAfX;AAIAG,SAAK,CAACI,SAAD,EAAY,CAACU,QAAD,EAAWC,QAAX,KAAwB;AACvC,UAAIA,QAAJ,EAAc;AACZP,gBAAQ,CAACQ,SAATR,CAAmBO,QAAnBP;AACAH,mBAAW,CAACO,KAAZP,GAAoBY,SAApBZ;AACAC,sBAAc,CAACM,KAAfN,GAAuBW,SAAvBX;AACAC,qBAAa,CAACK,KAAdL,GAAsBU,SAAtBV;AACD;;AAED,UAAIO,QAAJ,EAAcN,QAAQ,CAACU,OAATV,CAAiBM,QAAjBN;AARX,OASF;AACDW,WAAK,EAAE;AADN,KATE,CAALnB;AAYD;;AAED,SAAO;AACLI,aADK;AAELC,eAAW,EAAEP,QAAQ,CAACO,WAAD,CAFhB;AAGLC,kBAAc,EAAER,QAAQ,CAACQ,cAAD,CAHnB;AAILC,iBAAa,EAAET,QAAQ,CAACS,aAAD;AAJlB,GAAP;AAMD","names":["onBeforeUnmount","readonly","ref","watch","IN_BROWSER","useResizeObserver","callback","resizeRef","contentRect","contentBoxSize","borderBoxSize","observer","ResizeObserver","entries","length","value","disconnect","newValue","oldValue","unobserve","undefined","observe","flush"],"sources":["../../src/composables/resizeObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport type { DeepReadonly, Ref } from 'vue'\n\n// Globals\nimport { IN_BROWSER } from '@/util/globals'\n\ninterface ResizeState {\n  resizeRef: Ref<Element | undefined>\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n  borderBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n  contentBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback): ResizeState {\n  const resizeRef = ref<Element>()\n  const contentRect = ref<DOMRectReadOnly>()\n  const contentBoxSize = ref<ResizeObserverSize>()\n  const borderBoxSize = ref<ResizeObserverSize>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      contentRect.value = entries[0].contentRect\n      contentBoxSize.value = entries[0].contentBoxSize[0]\n      borderBoxSize.value = entries[0].borderBoxSize[0]\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n        contentBoxSize.value = undefined\n        borderBoxSize.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n    contentBoxSize: readonly(contentBoxSize),\n    borderBoxSize: readonly(borderBoxSize),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}