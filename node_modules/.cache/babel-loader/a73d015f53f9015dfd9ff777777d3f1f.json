{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Composables\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue';\nimport { consoleWarn, deepEqual, findChildren, getCurrentInstance, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String],\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean\n}, 'group');\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String\n}, 'group-item');\nexport function useGroupItem(props, injectKey) {\n  let required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const vm = getCurrentInstance('useGroupItem');\n\n  if (!vm) {\n    throw new Error('[Vuetify] useGroupItem composable must be used inside a component setup function');\n  }\n\n  const group = inject(injectKey, null);\n\n  if (!group) {\n    if (!required) return group;\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`);\n  }\n\n  const id = getUid();\n  const value = toRef(props, 'value');\n  const disabled = computed(() => group.disabled.value || props.disabled);\n  group.register({\n    id,\n    value,\n    disabled\n  }, vm);\n  onBeforeUnmount(() => {\n    group.unregister(id);\n  });\n  const isSelected = computed(() => {\n    return group.isSelected(id);\n  });\n  const selectedClass = computed(() => {\n    var _group$selectedClass$;\n\n    return isSelected.value && ((_group$selectedClass$ = group.selectedClass.value) != null ? _group$selectedClass$ : props.selectedClass);\n  });\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: value => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group\n  };\n}\nexport function useGroup(props, injectKey) {\n  let isUnmounted = false;\n  const items = reactive([]);\n  const selected = useProxiedModel(props, 'modelValue', [], v => {\n    if (v == null) return [];\n    return getIds(items, wrapInArray(v));\n  }, v => {\n    const arr = getValues(items, v);\n    return props.multiple ? arr : arr[0];\n  });\n  const groupVm = getCurrentInstance('useGroup');\n\n  function register(item, vm) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item;\n    const children = findChildren(groupVm == null ? void 0 : groupVm.vnode);\n    const instances = children.slice(1) // First one is group component itself\n    .filter(cmp => !!cmp.provides[injectKey]); // TODO: Fix in TS 4.4\n\n    const index = instances.indexOf(vm);\n    if (index > -1) items.splice(index, 0, unwrapped);else items.push(unwrapped);\n  }\n\n  function unregister(id) {\n    if (isUnmounted) return; // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue();\n    const index = items.findIndex(item => item.id === id);\n    items.splice(index, 1);\n  } // If mandatory and nothing is selected, then select first non-disabled item\n\n\n  function forceMandatoryValue() {\n    const item = items.find(item => !item.disabled);\n\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id];\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue();\n  });\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function select(id, isSelected) {\n    const item = items.find(item => item.id === id);\n    if (isSelected && item != null && item.disabled) return;\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice();\n      const index = internalValue.findIndex(v => v === id); // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n\n      if (props.mandatory && index > -1 && internalValue.length <= 1) return; // We can't add value if it would\n      // cause max limit to be exceeded\n\n      if (props.max != null && index < 0 && internalValue.length + 1 > props.max) return;\n      if (index < 0 && isSelected) internalValue.push(id);else if (index >= 0 && !isSelected) internalValue.splice(index, 1);\n      selected.value = internalValue;\n    } else {\n      if (props.mandatory && selected.value.includes(id)) return;\n      selected.value = isSelected ? [id] : [];\n    }\n  }\n\n  function step(offset) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop');\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled);\n      item && (selected.value = [item.id]);\n    } else {\n      const currentId = selected.value[0];\n      const currentIndex = items.findIndex(i => i.id === currentId);\n      let newIndex = (currentIndex + offset) % items.length;\n      let newItem = items[newIndex];\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length;\n        newItem = items[newIndex];\n      }\n\n      if (newItem.disabled) return;\n      selected.value = [items[newIndex].id];\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: id => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items)\n  };\n  provide(injectKey, state);\n  return state;\n}\n\nfunction getIds(items, modelValue) {\n  const ids = [];\n\n  for (const item of items) {\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value))) {\n        ids.push(item.id);\n      }\n    } else if (modelValue.includes(item.id)) {\n      ids.push(item.id);\n    }\n  }\n\n  return ids;\n}\n\nfunction getValues(items, ids) {\n  const values = [];\n\n  for (const item of items) {\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : item.id);\n    }\n  }\n\n  return values;\n}","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","onBeforeUnmount","onMounted","provide","reactive","toRef","consoleWarn","deepEqual","findChildren","getCurrentInstance","getUid","propsFactory","wrapInArray","makeGroupProps","modelValue","type","default","undefined","multiple","Boolean","mandatory","String","max","Number","selectedClass","disabled","makeGroupItemProps","value","useGroupItem","props","injectKey","required","vm","Error","group","description","id","register","unregister","isSelected","toggle","select","useGroup","isUnmounted","items","selected","v","getIds","arr","getValues","groupVm","item","unwrapped","children","vnode","instances","slice","filter","cmp","provides","index","indexOf","splice","push","forceMandatoryValue","findIndex","find","length","internalValue","includes","step","offset","currentId","currentIndex","i","newIndex","newItem","state","prev","next","ids","values"],"sources":["../../src/composables/group.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue'\nimport { consoleWarn, deepEqual, findChildren, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\ninterface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\ninterface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': ((val: unknown) => void) | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<any[]>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<string | false | undefined>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\ntype GroupItemProps = ExtractPropTypes<ReturnType<typeof makeGroupItemProps>>\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const id = getUid()\n  const value = toRef(props, 'value')\n  const disabled = computed(() => group.disabled.value || props.disabled)\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && (group.selectedClass.value ?? props.selectedClass))\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const children = findChildren(groupVm?.vnode)\n    const instances = children\n      .slice(1) // First one is group component itself\n      .filter(cmp => !!cmp.provides[injectKey as any]) // TODO: Fix in TS 4.4\n    const index = instances.indexOf(vm)\n\n    if (index > -1) items.splice(index, 0, unwrapped)\n    else items.push(unwrapped)\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, isSelected: boolean) {\n    const item = items.find(item => item.id === id)\n    if (isSelected && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        props.mandatory &&\n        index > -1 &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        props.max != null &&\n        index < 0 &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && isSelected) internalValue.push(id)\n      else if (index >= 0 && !isSelected) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      if (props.mandatory && selected.value.includes(id)) return\n\n      selected.value = isSelected ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids = []\n  for (const item of items) {\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value))) {\n        ids.push(item.id)\n      }\n    } else if (modelValue.includes(item.id)) {\n      ids.push(item.id)\n    }\n  }\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values = []\n\n  for (const item of items) {\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : item.id)\n    }\n  }\n\n  return values\n}\n"]},"metadata":{},"sourceType":"module"}