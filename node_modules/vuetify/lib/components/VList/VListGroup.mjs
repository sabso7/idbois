import { withDirectives as _withDirectives, createVNode as _createVNode, vShow as _vShow } from "vue";
// Components
import { VExpandTransition } from "../transitions/index.mjs"; // Composables

import { useList } from "./list.mjs";
import { makeTagProps } from "../../composables/tag.mjs";
import { useNestedGroup } from "../../composables/nested/nested.mjs"; // Utilities

import { computed } from 'vue';
import { genericComponent } from "../../util/index.mjs"; // Types

export const VListGroup = genericComponent()({
  name: 'VListGroup',
  props: {
    value: null,
    collapseIcon: {
      type: String,
      default: '$collapse'
    },
    expandIcon: {
      type: String,
      default: '$expand'
    },
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      isOpen,
      open
    } = useNestedGroup(props);
    const list = useList();

    const onClick = e => {
      open(!isOpen.value, e);
    };

    const activatorProps = computed(() => ({
      onClick,
      appendIcon: isOpen.value ? props.collapseIcon : props.expandIcon,
      class: 'v-list-group__header',
      value: `${props.value}_header`
    }));
    return () => {
      var _slots$activator, _slots$default;

      return _createVNode(props.tag, {
        "class": ['v-list-group', {
          'v-list-group--prepend': list == null ? void 0 : list.hasPrepend.value
        }]
      }, {
        default: () => [(_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {
          props: activatorProps.value
        }), _createVNode(VExpandTransition, null, {
          default: () => [_withDirectives(_createVNode("div", {
            "class": "v-list-group__items"
          }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), [[_vShow, isOpen.value]])]
        })]
      });
    };
  }

});
//# sourceMappingURL=VListGroup.mjs.map